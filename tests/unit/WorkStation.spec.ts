import {WorkStation} from '@/classes/WorkStation';
import {UnfairDice} from '../toolbox/UnfairDice';


describe('WorkStation', () => {
    let unfairDice: UnfairDice;
    let workStation: WorkStation;

    beforeEach(() => {
        unfairDice = new UnfairDice();
        workStation = new WorkStation(unfairDice);
    });

    it('defaults to being created with one worker on it', () => {
        expect(workStation.numberOfWorkers).toBe(1);
    });

    it('calculates total effort generated by adding the effort of each worker', () => {
        unfairDice.guaranteedRollValue = 2; // Any value
        workStation.setNumberOfWorkers(5);  // Any value

        expect(workStation.recalculateEffort()).toEqual(unfairDice.guaranteedRollValue * workStation.numberOfWorkers);
    });

    it('decreases the input by the amount of effort generated in the work cycle', () => {
        workStation.setInput(100);
        workStation.setNumberOfWorkers(1);
        unfairDice.guaranteedRollValue = 5;

        workStation.work();
        expect(workStation.input).toEqual(100 - 5);
    });

    it('requires both effort and input to produce each unit of output', () => {
        workStation.setInput(5); // Very low amount of input
        workStation.setNumberOfWorkers(10); // Very strong effort generation
        unfairDice.guaranteedRollValue = 10;

        // It's expected that the output generated with be very low, due to the shortage of input
        workStation.work();
        expect(workStation.input).toEqual(0); // All input was processed
        expect(workStation.effortRemaining).toEqual(95); // Lots of wasted effort
        expect(workStation.output).toEqual(5); // All 5 units of input got converted into output
    });
});
